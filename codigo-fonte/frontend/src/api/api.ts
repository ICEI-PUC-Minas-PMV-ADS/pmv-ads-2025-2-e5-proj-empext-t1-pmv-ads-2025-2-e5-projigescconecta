/* tslint:disable */
/* eslint-disable */
/**
 * IgescConecta.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BeneficiaryViewModel
 */
export interface BeneficiaryViewModel {
    /**
     * 
     * @type {number}
     * @memberof BeneficiaryViewModel
     */
    'beneficiaryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BeneficiaryViewModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof BeneficiaryViewModel
     */
    'oscsCount'?: number;
}
/**
 * 
 * @export
 * @interface BusinessCaseViewModel
 */
export interface BusinessCaseViewModel {
    /**
     * 
     * @type {number}
     * @memberof BusinessCaseViewModel
     */
    'businessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BusinessCaseViewModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof BusinessCaseViewModel
     */
    'originsBusinessCases'?: number;
}
/**
 * 
 * @export
 * @interface CreateBeneficiaryRequest
 */
export interface CreateBeneficiaryRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBeneficiaryRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CreateBeneficiaryResponse
 */
export interface CreateBeneficiaryResponse {
    /**
     * 
     * @type {number}
     * @memberof CreateBeneficiaryResponse
     */
    'beneficiaryId'?: number;
}
/**
 * 
 * @export
 * @interface CreateBusinessCaseRequest
 */
export interface CreateBusinessCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBusinessCaseRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateBusinessCaseRequest
     */
    'originsBusinessCasesIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface CreateBusinessCaseResponse
 */
export interface CreateBusinessCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof CreateBusinessCaseResponse
     */
    'businessCaseId'?: number;
}
/**
 * 
 * @export
 * @interface CreateOriginBusinessCaseRequest
 */
export interface CreateOriginBusinessCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateOriginBusinessCaseRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOriginBusinessCaseRequest
     */
    'businessCaseId'?: number;
}
/**
 * 
 * @export
 * @interface CreateOriginBusinessCaseResponse
 */
export interface CreateOriginBusinessCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof CreateOriginBusinessCaseResponse
     */
    'originBusinessCaseId'?: number;
}
/**
 * 
 * @export
 * @interface CreateOscRequest
 */
export interface CreateOscRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateOscRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOscRequest
     */
    'objective'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOscRequest
     */
    'corporateName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOscRequest
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOscRequest
     */
    'zipCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOscRequest
     */
    'oscPrimaryDocumment'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateOscRequest
     */
    'beneficiariesIds'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateOscRequest
     */
    'originsBusinessCasesIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface CreateOscResponse
 */
export interface CreateOscResponse {
    /**
     * 
     * @type {number}
     * @memberof CreateOscResponse
     */
    'oscId'?: number;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     * 
     * @type {number}
     * @memberof CreateUserResponse
     */
    'userId'?: number;
}
/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'propertyName'?: string;
    /**
     * 
     * @type {Op}
     * @memberof Filter
     */
    'operation'?: Op;
    /**
     * 
     * @type {any}
     * @memberof Filter
     */
    'value'?: any;
}


/**
 * 
 * @export
 * @interface ForgotPasswordRequest
 */
export interface ForgotPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordResponse
 */
export interface ForgotPasswordResponse {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetBeneficiaryOscResponse
 */
export interface GetBeneficiaryOscResponse {
    /**
     * 
     * @type {number}
     * @memberof GetBeneficiaryOscResponse
     */
    'oscId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetBeneficiaryOscResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBeneficiaryOscResponse
     */
    'corporateName'?: string;
}
/**
 * 
 * @export
 * @interface GetBeneficiaryResponse
 */
export interface GetBeneficiaryResponse {
    /**
     * 
     * @type {number}
     * @memberof GetBeneficiaryResponse
     */
    'beneficiaryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetBeneficiaryResponse
     */
    'name'?: string;
    /**
     * 
     * @type {Array<GetBeneficiaryOscResponse>}
     * @memberof GetBeneficiaryResponse
     */
    'oscs'?: Array<GetBeneficiaryOscResponse>;
}
/**
 * 
 * @export
 * @interface GetBusinessCaseOriginResponse
 */
export interface GetBusinessCaseOriginResponse {
    /**
     * 
     * @type {number}
     * @memberof GetBusinessCaseOriginResponse
     */
    'originBusinessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetBusinessCaseOriginResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GetBusinessCaseResponse
 */
export interface GetBusinessCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof GetBusinessCaseResponse
     */
    'businessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetBusinessCaseResponse
     */
    'name'?: string;
    /**
     * 
     * @type {Array<GetBusinessCaseOriginResponse>}
     * @memberof GetBusinessCaseResponse
     */
    'origins'?: Array<GetBusinessCaseOriginResponse>;
}
/**
 * 
 * @export
 * @interface GetOriginBusinessCaseOscResponse
 */
export interface GetOriginBusinessCaseOscResponse {
    /**
     * 
     * @type {number}
     * @memberof GetOriginBusinessCaseOscResponse
     */
    'oscId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOriginBusinessCaseOscResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GetOriginBusinessCaseResponse
 */
export interface GetOriginBusinessCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof GetOriginBusinessCaseResponse
     */
    'originBusinessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOriginBusinessCaseResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOriginBusinessCaseResponse
     */
    'description'?: string;
    /**
     * 
     * @type {Array<GetOriginBusinessCaseOscResponse>}
     * @memberof GetOriginBusinessCaseResponse
     */
    'oscs'?: Array<GetOriginBusinessCaseOscResponse> | null;
}
/**
 * 
 * @export
 * @interface GetOscBeneficiaryResponse
 */
export interface GetOscBeneficiaryResponse {
    /**
     * 
     * @type {number}
     * @memberof GetOscBeneficiaryResponse
     */
    'beneficiaryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOscBeneficiaryResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GetOscOriginBusinessCaseResponse
 */
export interface GetOscOriginBusinessCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof GetOscOriginBusinessCaseResponse
     */
    'originBusinessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOscOriginBusinessCaseResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GetOscResponse
 */
export interface GetOscResponse {
    /**
     * 
     * @type {number}
     * @memberof GetOscResponse
     */
    'oscId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetOscResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOscResponse
     */
    'corporateName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOscResponse
     */
    'objective'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOscResponse
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOscResponse
     */
    'zipCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOscResponse
     */
    'oscPrimaryDocumment'?: string | null;
    /**
     * 
     * @type {Array<GetOscBeneficiaryResponse>}
     * @memberof GetOscResponse
     */
    'beneficiaries'?: Array<GetOscBeneficiaryResponse>;
    /**
     * 
     * @type {Array<GetOscOriginBusinessCaseResponse>}
     * @memberof GetOscResponse
     */
    'originsBusinessCases'?: Array<GetOscOriginBusinessCaseResponse>;
}
/**
 * 
 * @export
 * @interface ListBeneficiaryRequest
 */
export interface ListBeneficiaryRequest {
    /**
     * 
     * @type {number}
     * @memberof ListBeneficiaryRequest
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListBeneficiaryRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {Array<Filter>}
     * @memberof ListBeneficiaryRequest
     */
    'filters'?: Array<Filter>;
}
/**
 * 
 * @export
 * @interface ListBeneficiaryViewModel
 */
export interface ListBeneficiaryViewModel {
    /**
     * 
     * @type {number}
     * @memberof ListBeneficiaryViewModel
     */
    'totalItems'?: number;
    /**
     * 
     * @type {Array<BeneficiaryViewModel>}
     * @memberof ListBeneficiaryViewModel
     */
    'items'?: Array<BeneficiaryViewModel>;
}
/**
 * 
 * @export
 * @interface ListBusinessCaseRequest
 */
export interface ListBusinessCaseRequest {
    /**
     * 
     * @type {number}
     * @memberof ListBusinessCaseRequest
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListBusinessCaseRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {Array<Filter>}
     * @memberof ListBusinessCaseRequest
     */
    'filters'?: Array<Filter>;
}
/**
 * 
 * @export
 * @interface ListBusinessCaseViewModel
 */
export interface ListBusinessCaseViewModel {
    /**
     * 
     * @type {number}
     * @memberof ListBusinessCaseViewModel
     */
    'totalItems'?: number;
    /**
     * 
     * @type {Array<BusinessCaseViewModel>}
     * @memberof ListBusinessCaseViewModel
     */
    'items'?: Array<BusinessCaseViewModel>;
}
/**
 * 
 * @export
 * @interface ListOriginBusinessCaseRequest
 */
export interface ListOriginBusinessCaseRequest {
    /**
     * 
     * @type {number}
     * @memberof ListOriginBusinessCaseRequest
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListOriginBusinessCaseRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {Array<Filter>}
     * @memberof ListOriginBusinessCaseRequest
     */
    'filters'?: Array<Filter>;
}
/**
 * 
 * @export
 * @interface ListOriginBusinessCaseViewModel
 */
export interface ListOriginBusinessCaseViewModel {
    /**
     * 
     * @type {number}
     * @memberof ListOriginBusinessCaseViewModel
     */
    'totalItems'?: number;
    /**
     * 
     * @type {Array<OriginBusinessCaseViewModel>}
     * @memberof ListOriginBusinessCaseViewModel
     */
    'items'?: Array<OriginBusinessCaseViewModel>;
}
/**
 * 
 * @export
 * @interface ListOscRequest
 */
export interface ListOscRequest {
    /**
     * 
     * @type {number}
     * @memberof ListOscRequest
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListOscRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {Array<Filter>}
     * @memberof ListOscRequest
     */
    'filters'?: Array<Filter>;
}
/**
 * 
 * @export
 * @interface ListOscViewModel
 */
export interface ListOscViewModel {
    /**
     * 
     * @type {number}
     * @memberof ListOscViewModel
     */
    'totalItems'?: number;
    /**
     * 
     * @type {Array<OscViewModel>}
     * @memberof ListOscViewModel
     */
    'items'?: Array<OscViewModel>;
}
/**
 * 
 * @export
 * @interface ListUserRequest
 */
export interface ListUserRequest {
    /**
     * 
     * @type {number}
     * @memberof ListUserRequest
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListUserRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {Array<Filter>}
     * @memberof ListUserRequest
     */
    'filters'?: Array<Filter>;
}
/**
 * 
 * @export
 * @interface ListUserViewModel
 */
export interface ListUserViewModel {
    /**
     * 
     * @type {number}
     * @memberof ListUserViewModel
     */
    'totalItems'?: number;
    /**
     * 
     * @type {Array<UserViewModel>}
     * @memberof ListUserViewModel
     */
    'items'?: Array<UserViewModel>;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'expiresIn'?: string;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const Op = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15
} as const;

export type Op = typeof Op[keyof typeof Op];


/**
 * 
 * @export
 * @interface OriginBusinessCaseViewModel
 */
export interface OriginBusinessCaseViewModel {
    /**
     * 
     * @type {number}
     * @memberof OriginBusinessCaseViewModel
     */
    'originBusinessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OriginBusinessCaseViewModel
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface OscViewModel
 */
export interface OscViewModel {
    /**
     * 
     * @type {number}
     * @memberof OscViewModel
     */
    'oscId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OscViewModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OscViewModel
     */
    'objective'?: string;
    /**
     * 
     * @type {string}
     * @memberof OscViewModel
     */
    'corporateName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OscViewModel
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof OscViewModel
     */
    'zipCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OscViewModel
     */
    'oscPrimaryDocumment'?: string;
    /**
     * 
     * @type {number}
     * @memberof OscViewModel
     */
    'beneficiariesCount'?: number;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordRequest
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'newPassword'?: string;
}
/**
 * 
 * @export
 * @interface ResetPasswordResponse
 */
export interface ResetPasswordResponse {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UpdateBeneficiaryInOscResponse
 */
export interface UpdateBeneficiaryInOscResponse {
    /**
     * 
     * @type {number}
     * @memberof UpdateBeneficiaryInOscResponse
     */
    'beneficiaryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBeneficiaryInOscResponse
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateBeneficiaryRequest
 */
export interface UpdateBeneficiaryRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateBeneficiaryRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateBeneficiaryResponse
 */
export interface UpdateBeneficiaryResponse {
    /**
     * 
     * @type {number}
     * @memberof UpdateBeneficiaryResponse
     */
    'beneficiaryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBeneficiaryResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateBusinessCaseRequest
 */
export interface UpdateBusinessCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateBusinessCaseRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateBusinessCaseRequest
     */
    'originsBusinessCasesIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface UpdateBusinessCaseResponse
 */
export interface UpdateBusinessCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof UpdateBusinessCaseResponse
     */
    'businessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateBusinessCaseResponse
     */
    'name'?: string;
    /**
     * 
     * @type {Array<UpdateOriginBusinessCaseInBusinessCaseResponse>}
     * @memberof UpdateBusinessCaseResponse
     */
    'originsBusinessCases'?: Array<UpdateOriginBusinessCaseInBusinessCaseResponse> | null;
}
/**
 * 
 * @export
 * @interface UpdateOriginBusinessCaseInBusinessCaseResponse
 */
export interface UpdateOriginBusinessCaseInBusinessCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof UpdateOriginBusinessCaseInBusinessCaseResponse
     */
    'originBusinessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateOriginBusinessCaseInBusinessCaseResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateOriginBusinessCaseInOscResponse
 */
export interface UpdateOriginBusinessCaseInOscResponse {
    /**
     * 
     * @type {number}
     * @memberof UpdateOriginBusinessCaseInOscResponse
     */
    'originBusinessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateOriginBusinessCaseInOscResponse
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateOriginBusinessCaseRequest
 */
export interface UpdateOriginBusinessCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateOriginBusinessCaseRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateOriginBusinessCaseResponse
 */
export interface UpdateOriginBusinessCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof UpdateOriginBusinessCaseResponse
     */
    'originBusinessCaseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateOriginBusinessCaseResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateOscRequest
 */
export interface UpdateOscRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateOscRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscRequest
     */
    'corporateName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscRequest
     */
    'objective'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscRequest
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscRequest
     */
    'zipCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscRequest
     */
    'oscPrimaryDocumment'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateOscRequest
     */
    'beneficiaryIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateOscRequest
     */
    'originBusinessCaseIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface UpdateOscResponse
 */
export interface UpdateOscResponse {
    /**
     * 
     * @type {number}
     * @memberof UpdateOscResponse
     */
    'oscId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscResponse
     */
    'corporateName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscResponse
     */
    'objective'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscResponse
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscResponse
     */
    'zipCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOscResponse
     */
    'oscPrimaryDocumment'?: string | null;
    /**
     * 
     * @type {Array<UpdateBeneficiaryInOscResponse>}
     * @memberof UpdateOscResponse
     */
    'beneficiaries'?: Array<UpdateBeneficiaryInOscResponse> | null;
    /**
     * 
     * @type {Array<UpdateOriginBusinessCaseInOscResponse>}
     * @memberof UpdateOscResponse
     */
    'originsBusinessCases'?: Array<UpdateOriginBusinessCaseInOscResponse> | null;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateUserRequest
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserRequest
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'role'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateUserResponse
 */
export interface UpdateUserResponse {
    /**
     * 
     * @type {number}
     * @memberof UpdateUserResponse
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserResponse
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserResponse
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserResponse
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface UserLogin
 */
export interface UserLogin {
    /**
     * 
     * @type {string}
     * @memberof UserLogin
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLogin
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UserToken
 */
export interface UserToken {
    /**
     * 
     * @type {string}
     * @memberof UserToken
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserToken
     */
    'expiresIn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserToken
     */
    'refresfToken'?: string;
}
/**
 * 
 * @export
 * @interface UserViewModel
 */
export interface UserViewModel {
    /**
     * 
     * @type {number}
     * @memberof UserViewModel
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserViewModel
     */
    'isActive'?: boolean;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (forgotPasswordRequest?: ForgotPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLogin} [userLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userLogin?: UserLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginResponse} [loginResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (loginResponse?: LoginResponse, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/RefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginResponse, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (resetPasswordRequest?: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(forgotPasswordRequest?: ForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForgotPasswordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(forgotPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.forgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserLogin} [userLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userLogin?: UserLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(userLogin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginResponse} [loginResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(loginResponse?: LoginResponse, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(loginResponse, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(resetPasswordRequest?: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(resetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(forgotPasswordRequest?: ForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<ForgotPasswordResponse> {
            return localVarFp.forgotPassword(forgotPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLogin} [userLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userLogin?: UserLogin, options?: RawAxiosRequestConfig): AxiosPromise<UserToken> {
            return localVarFp.login(userLogin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginResponse} [loginResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(loginResponse?: LoginResponse, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.refreshToken(loginResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(resetPasswordRequest?: ResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResetPasswordResponse> {
            return localVarFp.resetPassword(resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public forgotPassword(forgotPasswordRequest?: ForgotPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).forgotPassword(forgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLogin} [userLogin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(userLogin?: UserLogin, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(userLogin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginResponse} [loginResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(loginResponse?: LoginResponse, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(loginResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordRequest} [resetPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public resetPassword(resetPasswordRequest?: ResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).resetPassword(resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BeneficiariesApi - axios parameter creator
 * @export
 */
export const BeneficiariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBeneficiaryRequest} [createBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBeneficiary: async (createBeneficiaryRequest?: CreateBeneficiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/beneficiary/CreateBeneficiary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBeneficiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBeneficiary: async (beneficiaryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('deleteBeneficiary', 'beneficiaryId', beneficiaryId)
            const localVarPath = `/api/beneficiary/{beneficiaryId}`
                .replace(`{${"beneficiaryId"}}`, encodeURIComponent(String(beneficiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBeneficiary: async (beneficiaryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('getBeneficiary', 'beneficiaryId', beneficiaryId)
            const localVarPath = `/api/beneficiaries/{beneficiaryId}`
                .replace(`{${"beneficiaryId"}}`, encodeURIComponent(String(beneficiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListBeneficiaryRequest} [listBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBeneficiary: async (listBeneficiaryRequest?: ListBeneficiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/beneficiary/ListBeneficiary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listBeneficiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {UpdateBeneficiaryRequest} [updateBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBeneficiary: async (beneficiaryId: number, updateBeneficiaryRequest?: UpdateBeneficiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('updateBeneficiary', 'beneficiaryId', beneficiaryId)
            const localVarPath = `/api/beneficiaries/{beneficiaryId}`
                .replace(`{${"beneficiaryId"}}`, encodeURIComponent(String(beneficiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBeneficiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BeneficiariesApi - functional programming interface
 * @export
 */
export const BeneficiariesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BeneficiariesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateBeneficiaryRequest} [createBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBeneficiary(createBeneficiaryRequest?: CreateBeneficiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBeneficiaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBeneficiary(createBeneficiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.createBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBeneficiary(beneficiaryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.deleteBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBeneficiaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBeneficiary(beneficiaryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.getBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListBeneficiaryRequest} [listBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBeneficiary(listBeneficiaryRequest?: ListBeneficiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBeneficiaryViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBeneficiary(listBeneficiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.listBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {UpdateBeneficiaryRequest} [updateBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBeneficiary(beneficiaryId: number, updateBeneficiaryRequest?: UpdateBeneficiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBeneficiaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBeneficiary(beneficiaryId, updateBeneficiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.updateBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BeneficiariesApi - factory interface
 * @export
 */
export const BeneficiariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BeneficiariesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateBeneficiaryRequest} [createBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBeneficiary(createBeneficiaryRequest?: CreateBeneficiaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateBeneficiaryResponse> {
            return localVarFp.createBeneficiary(createBeneficiaryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBeneficiary(beneficiaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig): AxiosPromise<GetBeneficiaryResponse> {
            return localVarFp.getBeneficiary(beneficiaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListBeneficiaryRequest} [listBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBeneficiary(listBeneficiaryRequest?: ListBeneficiaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListBeneficiaryViewModel> {
            return localVarFp.listBeneficiary(listBeneficiaryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {UpdateBeneficiaryRequest} [updateBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBeneficiary(beneficiaryId: number, updateBeneficiaryRequest?: UpdateBeneficiaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateBeneficiaryResponse> {
            return localVarFp.updateBeneficiary(beneficiaryId, updateBeneficiaryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BeneficiariesApi - object-oriented interface
 * @export
 * @class BeneficiariesApi
 * @extends {BaseAPI}
 */
export class BeneficiariesApi extends BaseAPI {
    /**
     * 
     * @param {CreateBeneficiaryRequest} [createBeneficiaryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public createBeneficiary(createBeneficiaryRequest?: CreateBeneficiaryRequest, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).createBeneficiary(createBeneficiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} beneficiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public deleteBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).deleteBeneficiary(beneficiaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} beneficiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public getBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).getBeneficiary(beneficiaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListBeneficiaryRequest} [listBeneficiaryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public listBeneficiary(listBeneficiaryRequest?: ListBeneficiaryRequest, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).listBeneficiary(listBeneficiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} beneficiaryId 
     * @param {UpdateBeneficiaryRequest} [updateBeneficiaryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public updateBeneficiary(beneficiaryId: number, updateBeneficiaryRequest?: UpdateBeneficiaryRequest, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).updateBeneficiary(beneficiaryId, updateBeneficiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BusinessCasesApi - axios parameter creator
 * @export
 */
export const BusinessCasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBusinessCaseRequest} [createBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessCase: async (createBusinessCaseRequest?: CreateBusinessCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/businesscase/CreateBusinessCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBusinessCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessCase: async (businessCaseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessCaseId' is not null or undefined
            assertParamExists('deleteBusinessCase', 'businessCaseId', businessCaseId)
            const localVarPath = `/api/businesscase/{businessCaseId}`
                .replace(`{${"businessCaseId"}}`, encodeURIComponent(String(businessCaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessCase: async (businessCaseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessCaseId' is not null or undefined
            assertParamExists('getBusinessCase', 'businessCaseId', businessCaseId)
            const localVarPath = `/api/businesscases/{businessCaseId}`
                .replace(`{${"businessCaseId"}}`, encodeURIComponent(String(businessCaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListBusinessCaseRequest} [listBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessCase: async (listBusinessCaseRequest?: ListBusinessCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/businesscase/ListBusinessCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listBusinessCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {UpdateBusinessCaseRequest} [updateBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessCase: async (businessCaseId: number, updateBusinessCaseRequest?: UpdateBusinessCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessCaseId' is not null or undefined
            assertParamExists('updateBusinessCase', 'businessCaseId', businessCaseId)
            const localVarPath = `/api/businesscases/{businessCaseId}`
                .replace(`{${"businessCaseId"}}`, encodeURIComponent(String(businessCaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBusinessCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessCasesApi - functional programming interface
 * @export
 */
export const BusinessCasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessCasesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateBusinessCaseRequest} [createBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBusinessCase(createBusinessCaseRequest?: CreateBusinessCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBusinessCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBusinessCase(createBusinessCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.createBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessCase(businessCaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.deleteBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessCase(businessCaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.getBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListBusinessCaseRequest} [listBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBusinessCase(listBusinessCaseRequest?: ListBusinessCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBusinessCaseViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBusinessCase(listBusinessCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.listBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {UpdateBusinessCaseRequest} [updateBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusinessCase(businessCaseId: number, updateBusinessCaseRequest?: UpdateBusinessCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBusinessCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusinessCase(businessCaseId, updateBusinessCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.updateBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BusinessCasesApi - factory interface
 * @export
 */
export const BusinessCasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessCasesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateBusinessCaseRequest} [createBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessCase(createBusinessCaseRequest?: CreateBusinessCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateBusinessCaseResponse> {
            return localVarFp.createBusinessCase(createBusinessCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBusinessCase(businessCaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig): AxiosPromise<GetBusinessCaseResponse> {
            return localVarFp.getBusinessCase(businessCaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListBusinessCaseRequest} [listBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessCase(listBusinessCaseRequest?: ListBusinessCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListBusinessCaseViewModel> {
            return localVarFp.listBusinessCase(listBusinessCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {UpdateBusinessCaseRequest} [updateBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessCase(businessCaseId: number, updateBusinessCaseRequest?: UpdateBusinessCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateBusinessCaseResponse> {
            return localVarFp.updateBusinessCase(businessCaseId, updateBusinessCaseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BusinessCasesApi - object-oriented interface
 * @export
 * @class BusinessCasesApi
 * @extends {BaseAPI}
 */
export class BusinessCasesApi extends BaseAPI {
    /**
     * 
     * @param {CreateBusinessCaseRequest} [createBusinessCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public createBusinessCase(createBusinessCaseRequest?: CreateBusinessCaseRequest, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).createBusinessCase(createBusinessCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} businessCaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public deleteBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).deleteBusinessCase(businessCaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} businessCaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public getBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).getBusinessCase(businessCaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListBusinessCaseRequest} [listBusinessCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public listBusinessCase(listBusinessCaseRequest?: ListBusinessCaseRequest, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).listBusinessCase(listBusinessCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} businessCaseId 
     * @param {UpdateBusinessCaseRequest} [updateBusinessCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public updateBusinessCase(businessCaseId: number, updateBusinessCaseRequest?: UpdateBusinessCaseRequest, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).updateBusinessCase(businessCaseId, updateBusinessCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OriginsBusinessCasesApi - axios parameter creator
 * @export
 */
export const OriginsBusinessCasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateOriginBusinessCaseRequest} [createOriginBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOriginBusinessCase: async (createOriginBusinessCaseRequest?: CreateOriginBusinessCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/origins-business-cases/CreateOriginBusinessCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOriginBusinessCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} originBusinessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOriginBusinessCase: async (originBusinessCaseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'originBusinessCaseId' is not null or undefined
            assertParamExists('deleteOriginBusinessCase', 'originBusinessCaseId', originBusinessCaseId)
            const localVarPath = `/api/origins-business-cases/{originBusinessCaseId}`
                .replace(`{${"originBusinessCaseId"}}`, encodeURIComponent(String(originBusinessCaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} originBusinessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOriginBusinessCase: async (originBusinessCaseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'originBusinessCaseId' is not null or undefined
            assertParamExists('getOriginBusinessCase', 'originBusinessCaseId', originBusinessCaseId)
            const localVarPath = `/api/origins-business-cases/{originBusinessCaseId}`
                .replace(`{${"originBusinessCaseId"}}`, encodeURIComponent(String(originBusinessCaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListOriginBusinessCaseRequest} [listOriginBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOriginBusinessCase: async (listOriginBusinessCaseRequest?: ListOriginBusinessCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/origins-business-cases/ListOriginBusinessCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listOriginBusinessCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} originBusinessCaseId 
         * @param {UpdateOriginBusinessCaseRequest} [updateOriginBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOriginBusinessCase: async (originBusinessCaseId: number, updateOriginBusinessCaseRequest?: UpdateOriginBusinessCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'originBusinessCaseId' is not null or undefined
            assertParamExists('updateOriginBusinessCase', 'originBusinessCaseId', originBusinessCaseId)
            const localVarPath = `/api/origins-business-cases/{originBusinessCaseId}`
                .replace(`{${"originBusinessCaseId"}}`, encodeURIComponent(String(originBusinessCaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOriginBusinessCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OriginsBusinessCasesApi - functional programming interface
 * @export
 */
export const OriginsBusinessCasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OriginsBusinessCasesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateOriginBusinessCaseRequest} [createOriginBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOriginBusinessCase(createOriginBusinessCaseRequest?: CreateOriginBusinessCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOriginBusinessCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOriginBusinessCase(createOriginBusinessCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OriginsBusinessCasesApi.createOriginBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} originBusinessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOriginBusinessCase(originBusinessCaseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOriginBusinessCase(originBusinessCaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OriginsBusinessCasesApi.deleteOriginBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} originBusinessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOriginBusinessCase(originBusinessCaseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOriginBusinessCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOriginBusinessCase(originBusinessCaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OriginsBusinessCasesApi.getOriginBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListOriginBusinessCaseRequest} [listOriginBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOriginBusinessCase(listOriginBusinessCaseRequest?: ListOriginBusinessCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOriginBusinessCaseViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOriginBusinessCase(listOriginBusinessCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OriginsBusinessCasesApi.listOriginBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} originBusinessCaseId 
         * @param {UpdateOriginBusinessCaseRequest} [updateOriginBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOriginBusinessCase(originBusinessCaseId: number, updateOriginBusinessCaseRequest?: UpdateOriginBusinessCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateOriginBusinessCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOriginBusinessCase(originBusinessCaseId, updateOriginBusinessCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OriginsBusinessCasesApi.updateOriginBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OriginsBusinessCasesApi - factory interface
 * @export
 */
export const OriginsBusinessCasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OriginsBusinessCasesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateOriginBusinessCaseRequest} [createOriginBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOriginBusinessCase(createOriginBusinessCaseRequest?: CreateOriginBusinessCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateOriginBusinessCaseResponse> {
            return localVarFp.createOriginBusinessCase(createOriginBusinessCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} originBusinessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOriginBusinessCase(originBusinessCaseId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOriginBusinessCase(originBusinessCaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} originBusinessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOriginBusinessCase(originBusinessCaseId: number, options?: RawAxiosRequestConfig): AxiosPromise<GetOriginBusinessCaseResponse> {
            return localVarFp.getOriginBusinessCase(originBusinessCaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListOriginBusinessCaseRequest} [listOriginBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOriginBusinessCase(listOriginBusinessCaseRequest?: ListOriginBusinessCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListOriginBusinessCaseViewModel> {
            return localVarFp.listOriginBusinessCase(listOriginBusinessCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} originBusinessCaseId 
         * @param {UpdateOriginBusinessCaseRequest} [updateOriginBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOriginBusinessCase(originBusinessCaseId: number, updateOriginBusinessCaseRequest?: UpdateOriginBusinessCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateOriginBusinessCaseResponse> {
            return localVarFp.updateOriginBusinessCase(originBusinessCaseId, updateOriginBusinessCaseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OriginsBusinessCasesApi - object-oriented interface
 * @export
 * @class OriginsBusinessCasesApi
 * @extends {BaseAPI}
 */
export class OriginsBusinessCasesApi extends BaseAPI {
    /**
     * 
     * @param {CreateOriginBusinessCaseRequest} [createOriginBusinessCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginsBusinessCasesApi
     */
    public createOriginBusinessCase(createOriginBusinessCaseRequest?: CreateOriginBusinessCaseRequest, options?: RawAxiosRequestConfig) {
        return OriginsBusinessCasesApiFp(this.configuration).createOriginBusinessCase(createOriginBusinessCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} originBusinessCaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginsBusinessCasesApi
     */
    public deleteOriginBusinessCase(originBusinessCaseId: number, options?: RawAxiosRequestConfig) {
        return OriginsBusinessCasesApiFp(this.configuration).deleteOriginBusinessCase(originBusinessCaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} originBusinessCaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginsBusinessCasesApi
     */
    public getOriginBusinessCase(originBusinessCaseId: number, options?: RawAxiosRequestConfig) {
        return OriginsBusinessCasesApiFp(this.configuration).getOriginBusinessCase(originBusinessCaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListOriginBusinessCaseRequest} [listOriginBusinessCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginsBusinessCasesApi
     */
    public listOriginBusinessCase(listOriginBusinessCaseRequest?: ListOriginBusinessCaseRequest, options?: RawAxiosRequestConfig) {
        return OriginsBusinessCasesApiFp(this.configuration).listOriginBusinessCase(listOriginBusinessCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} originBusinessCaseId 
     * @param {UpdateOriginBusinessCaseRequest} [updateOriginBusinessCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginsBusinessCasesApi
     */
    public updateOriginBusinessCase(originBusinessCaseId: number, updateOriginBusinessCaseRequest?: UpdateOriginBusinessCaseRequest, options?: RawAxiosRequestConfig) {
        return OriginsBusinessCasesApiFp(this.configuration).updateOriginBusinessCase(originBusinessCaseId, updateOriginBusinessCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OscsApi - axios parameter creator
 * @export
 */
export const OscsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateOscRequest} [createOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOsc: async (createOscRequest?: CreateOscRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/osc/CreateOsc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOscRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOsc: async (oscId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oscId' is not null or undefined
            assertParamExists('deleteOsc', 'oscId', oscId)
            const localVarPath = `/api/osc/{oscId}`
                .replace(`{${"oscId"}}`, encodeURIComponent(String(oscId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOsc: async (oscId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oscId' is not null or undefined
            assertParamExists('getOsc', 'oscId', oscId)
            const localVarPath = `/api/oscs/{oscId}`
                .replace(`{${"oscId"}}`, encodeURIComponent(String(oscId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListOscRequest} [listOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOsc: async (listOscRequest?: ListOscRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/osc/ListOsc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listOscRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} oscId 
         * @param {UpdateOscRequest} [updateOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOsc: async (oscId: number, updateOscRequest?: UpdateOscRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oscId' is not null or undefined
            assertParamExists('updateOsc', 'oscId', oscId)
            const localVarPath = `/api/oscs/{oscId}`
                .replace(`{${"oscId"}}`, encodeURIComponent(String(oscId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOscRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OscsApi - functional programming interface
 * @export
 */
export const OscsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OscsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateOscRequest} [createOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOsc(createOscRequest?: CreateOscRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOscResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOsc(createOscRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.createOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOsc(oscId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOsc(oscId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.deleteOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOsc(oscId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOscResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOsc(oscId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.getOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListOscRequest} [listOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOsc(listOscRequest?: ListOscRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOscViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOsc(listOscRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.listOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} oscId 
         * @param {UpdateOscRequest} [updateOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOsc(oscId: number, updateOscRequest?: UpdateOscRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateOscResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOsc(oscId, updateOscRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.updateOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OscsApi - factory interface
 * @export
 */
export const OscsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OscsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateOscRequest} [createOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOsc(createOscRequest?: CreateOscRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateOscResponse> {
            return localVarFp.createOsc(createOscRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOsc(oscId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOsc(oscId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOsc(oscId: number, options?: RawAxiosRequestConfig): AxiosPromise<GetOscResponse> {
            return localVarFp.getOsc(oscId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListOscRequest} [listOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOsc(listOscRequest?: ListOscRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListOscViewModel> {
            return localVarFp.listOsc(listOscRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} oscId 
         * @param {UpdateOscRequest} [updateOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOsc(oscId: number, updateOscRequest?: UpdateOscRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateOscResponse> {
            return localVarFp.updateOsc(oscId, updateOscRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OscsApi - object-oriented interface
 * @export
 * @class OscsApi
 * @extends {BaseAPI}
 */
export class OscsApi extends BaseAPI {
    /**
     * 
     * @param {CreateOscRequest} [createOscRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public createOsc(createOscRequest?: CreateOscRequest, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).createOsc(createOscRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} oscId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public deleteOsc(oscId: number, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).deleteOsc(oscId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} oscId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public getOsc(oscId: number, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).getOsc(oscId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListOscRequest} [listOscRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public listOsc(listOscRequest?: ListOscRequest, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).listOsc(listOscRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} oscId 
     * @param {UpdateOscRequest} [updateOscRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public updateOsc(oscId: number, updateOscRequest?: UpdateOscRequest, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).updateOsc(oscId, updateOscRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserRequest?: CreateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/CreateUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/api/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListUserRequest} [listUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUser: async (listUserRequest?: ListUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/ListUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: number, updateUserRequest?: UpdateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            const localVarPath = `/api/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserRequest?: CreateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListUserRequest} [listUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUser(listUserRequest?: ListUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUser(listUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.listUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: number, updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, updateUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserRequest?: CreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateUserResponse> {
            return localVarFp.createUser(createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListUserRequest} [listUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUser(listUserRequest?: ListUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListUserViewModel> {
            return localVarFp.listUser(listUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: number, updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateUserResponse> {
            return localVarFp.updateUser(userId, updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserRequest} [createUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(createUserRequest?: CreateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListUserRequest} [listUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUser(listUserRequest?: ListUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUser(listUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {UpdateUserRequest} [updateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(userId: number, updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(userId, updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



