/* tslint:disable */
/* eslint-disable */
/**
 * IgescConecta.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateProjectTypeRequest } from '../models';
// @ts-ignore
import type { CreateProjectTypeResponse } from '../models';
// @ts-ignore
import type { DeleteProjectTypeResponse } from '../models';
// @ts-ignore
import type { EditProjectTypeRequest } from '../models';
// @ts-ignore
import type { EditProjectTypeResponse } from '../models';
// @ts-ignore
import type { GetProjectTypeByIdViewModel } from '../models';
// @ts-ignore
import type { ListProjectTypeRequest } from '../models';
// @ts-ignore
import type { ListProjectTypeViewModel } from '../models';
// @ts-ignore
import type { RestoreProjectTypeResponse } from '../models';
/**
 * ProjectTypesApi - axios parameter creator
 * @export
 */
export const ProjectTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProjectTypeRequest} [createProjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectType: async (createProjectTypeRequest?: CreateProjectTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projecttypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectType: async (projectTypeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectTypeId' is not null or undefined
            assertParamExists('deleteProjectType', 'projectTypeId', projectTypeId)
            const localVarPath = `/api/projecttypes/{projectTypeId}`
                .replace(`{${"projectTypeId"}}`, encodeURIComponent(String(projectTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectTypeId 
         * @param {EditProjectTypeRequest} [editProjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProjectType: async (projectTypeId: number, editProjectTypeRequest?: EditProjectTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectTypeId' is not null or undefined
            assertParamExists('editProjectType', 'projectTypeId', projectTypeId)
            const localVarPath = `/api/projecttypes/{projectTypeId}`
                .replace(`{${"projectTypeId"}}`, encodeURIComponent(String(projectTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editProjectTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectTypeById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectTypeById', 'id', id)
            const localVarPath = `/api/projecttypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListProjectTypeRequest} [listProjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectType: async (listProjectTypeRequest?: ListProjectTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projecttypes/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listProjectTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreProjectType: async (projectTypeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectTypeId' is not null or undefined
            assertParamExists('restoreProjectType', 'projectTypeId', projectTypeId)
            const localVarPath = `/api/projecttypes/{projectTypeId}/restore`
                .replace(`{${"projectTypeId"}}`, encodeURIComponent(String(projectTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectTypesApi - functional programming interface
 * @export
 */
export const ProjectTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProjectTypeRequest} [createProjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectType(createProjectTypeRequest?: CreateProjectTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProjectTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectType(createProjectTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTypesApi.createProjectType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectType(projectTypeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProjectTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectType(projectTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTypesApi.deleteProjectType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectTypeId 
         * @param {EditProjectTypeRequest} [editProjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editProjectType(projectTypeId: number, editProjectTypeRequest?: EditProjectTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditProjectTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editProjectType(projectTypeId, editProjectTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTypesApi.editProjectType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectTypeById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectTypeByIdViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectTypeById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTypesApi.getProjectTypeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListProjectTypeRequest} [listProjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjectType(listProjectTypeRequest?: ListProjectTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProjectTypeViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjectType(listProjectTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTypesApi.listProjectType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restoreProjectType(projectTypeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestoreProjectTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restoreProjectType(projectTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectTypesApi.restoreProjectType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectTypesApi - factory interface
 * @export
 */
export const ProjectTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectTypesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProjectTypeRequest} [createProjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectType(createProjectTypeRequest?: CreateProjectTypeRequest, options?: any): AxiosPromise<CreateProjectTypeResponse> {
            return localVarFp.createProjectType(createProjectTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectType(projectTypeId: number, options?: any): AxiosPromise<DeleteProjectTypeResponse> {
            return localVarFp.deleteProjectType(projectTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectTypeId 
         * @param {EditProjectTypeRequest} [editProjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProjectType(projectTypeId: number, editProjectTypeRequest?: EditProjectTypeRequest, options?: any): AxiosPromise<EditProjectTypeResponse> {
            return localVarFp.editProjectType(projectTypeId, editProjectTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectTypeById(id: number, options?: any): AxiosPromise<GetProjectTypeByIdViewModel> {
            return localVarFp.getProjectTypeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListProjectTypeRequest} [listProjectTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectType(listProjectTypeRequest?: ListProjectTypeRequest, options?: any): AxiosPromise<ListProjectTypeViewModel> {
            return localVarFp.listProjectType(listProjectTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreProjectType(projectTypeId: number, options?: any): AxiosPromise<RestoreProjectTypeResponse> {
            return localVarFp.restoreProjectType(projectTypeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectTypesApi - object-oriented interface
 * @export
 * @class ProjectTypesApi
 * @extends {BaseAPI}
 */
export class ProjectTypesApi extends BaseAPI {
    /**
     * 
     * @param {CreateProjectTypeRequest} [createProjectTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTypesApi
     */
    public createProjectType(createProjectTypeRequest?: CreateProjectTypeRequest, options?: RawAxiosRequestConfig) {
        return ProjectTypesApiFp(this.configuration).createProjectType(createProjectTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTypesApi
     */
    public deleteProjectType(projectTypeId: number, options?: RawAxiosRequestConfig) {
        return ProjectTypesApiFp(this.configuration).deleteProjectType(projectTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectTypeId 
     * @param {EditProjectTypeRequest} [editProjectTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTypesApi
     */
    public editProjectType(projectTypeId: number, editProjectTypeRequest?: EditProjectTypeRequest, options?: RawAxiosRequestConfig) {
        return ProjectTypesApiFp(this.configuration).editProjectType(projectTypeId, editProjectTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTypesApi
     */
    public getProjectTypeById(id: number, options?: RawAxiosRequestConfig) {
        return ProjectTypesApiFp(this.configuration).getProjectTypeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListProjectTypeRequest} [listProjectTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTypesApi
     */
    public listProjectType(listProjectTypeRequest?: ListProjectTypeRequest, options?: RawAxiosRequestConfig) {
        return ProjectTypesApiFp(this.configuration).listProjectType(listProjectTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTypesApi
     */
    public restoreProjectType(projectTypeId: number, options?: RawAxiosRequestConfig) {
        return ProjectTypesApiFp(this.configuration).restoreProjectType(projectTypeId, options).then((request) => request(this.axios, this.basePath));
    }
}

