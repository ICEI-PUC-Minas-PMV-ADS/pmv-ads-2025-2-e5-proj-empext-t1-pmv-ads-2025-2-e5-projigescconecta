/* tslint:disable */
/* eslint-disable */
/**
 * IGESC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBusinessCasesGetBusinessCaseGetBusinessCaseResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseViewModel } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseResponse } from '../models';
/**
 * BusinessCasesApi - axios parameter creator
 * @export
 */
export const BusinessCasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessCase: async (igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/businesscase/CreateBusinessCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessCase: async (businessCaseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessCaseId' is not null or undefined
            assertParamExists('deleteBusinessCase', 'businessCaseId', businessCaseId)
            const localVarPath = `/api/businesscase/{businessCaseId}`
                .replace(`{${"businessCaseId"}}`, encodeURIComponent(String(businessCaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessCase: async (businessCaseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessCaseId' is not null or undefined
            assertParamExists('getBusinessCase', 'businessCaseId', businessCaseId)
            const localVarPath = `/api/businesscases/{businessCaseId}`
                .replace(`{${"businessCaseId"}}`, encodeURIComponent(String(businessCaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessCase: async (igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/businesscase/ListBusinessCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessCase: async (businessCaseId: number, igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessCaseId' is not null or undefined
            assertParamExists('updateBusinessCase', 'businessCaseId', businessCaseId)
            const localVarPath = `/api/businesscases/{businessCaseId}`
                .replace(`{${"businessCaseId"}}`, encodeURIComponent(String(businessCaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessCasesApi - functional programming interface
 * @export
 */
export const BusinessCasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessCasesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBusinessCase(igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBusinessCase(igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.createBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessCase(businessCaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.deleteBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesBusinessCasesGetBusinessCaseGetBusinessCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessCase(businessCaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.getBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBusinessCase(igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBusinessCase(igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.listBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusinessCase(businessCaseId: number, igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusinessCase(businessCaseId, igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessCasesApi.updateBusinessCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BusinessCasesApi - factory interface
 * @export
 */
export const BusinessCasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessCasesApiFp(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessCase(igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseResponse> {
            return localVarFp.createBusinessCase(igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessCase(businessCaseId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBusinessCase(businessCaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessCase(businessCaseId: number, options?: any): AxiosPromise<IgescConectaAPIFeaturesBusinessCasesGetBusinessCaseGetBusinessCaseResponse> {
            return localVarFp.getBusinessCase(businessCaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessCase(igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseViewModel> {
            return localVarFp.listBusinessCase(igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} businessCaseId 
         * @param {IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessCase(businessCaseId: number, igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseResponse> {
            return localVarFp.updateBusinessCase(businessCaseId, igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BusinessCasesApi - object-oriented interface
 * @export
 * @class BusinessCasesApi
 * @extends {BaseAPI}
 */
export class BusinessCasesApi extends BaseAPI {
    /**
     * 
     * @param {IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public createBusinessCase(igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).createBusinessCase(igescConectaAPIFeaturesBusinessCasesCreateBusinessCaseCreateBusinessCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} businessCaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public deleteBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).deleteBusinessCase(businessCaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} businessCaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public getBusinessCase(businessCaseId: number, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).getBusinessCase(businessCaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public listBusinessCase(igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).listBusinessCase(igescConectaAPIFeaturesBusinessCasesListBusinessCasesListBusinessCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} businessCaseId 
     * @param {IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest} [igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCasesApi
     */
    public updateBusinessCase(businessCaseId: number, igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest?: IgescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest, options?: RawAxiosRequestConfig) {
        return BusinessCasesApiFp(this.configuration).updateBusinessCase(businessCaseId, igescConectaAPIFeaturesBusinessCasesUpdateBusinessCaseUpdateBusinessCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

