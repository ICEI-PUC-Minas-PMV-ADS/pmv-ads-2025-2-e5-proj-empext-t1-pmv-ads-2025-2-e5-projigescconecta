/* tslint:disable */
/* eslint-disable */
/**
 * IgescConecta.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { UptadeDonationCommand } from '../models';
/**
 * UptadeDonationEndpointApi - axios parameter creator
 * @export
 */
export const UptadeDonationEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {UptadeDonationCommand} [uptadeDonationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDonationsIdPut: async (id: string, uptadeDonationCommand?: UptadeDonationCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDonationsIdPut', 'id', id)
            const localVarPath = `/api/donations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uptadeDonationCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UptadeDonationEndpointApi - functional programming interface
 * @export
 */
export const UptadeDonationEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UptadeDonationEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UptadeDonationCommand} [uptadeDonationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDonationsIdPut(id: string, uptadeDonationCommand?: UptadeDonationCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDonationsIdPut(id, uptadeDonationCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UptadeDonationEndpointApi.apiDonationsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UptadeDonationEndpointApi - factory interface
 * @export
 */
export const UptadeDonationEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UptadeDonationEndpointApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UptadeDonationCommand} [uptadeDonationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDonationsIdPut(id: string, uptadeDonationCommand?: UptadeDonationCommand, options?: any): AxiosPromise<void> {
            return localVarFp.apiDonationsIdPut(id, uptadeDonationCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UptadeDonationEndpointApi - object-oriented interface
 * @export
 * @class UptadeDonationEndpointApi
 * @extends {BaseAPI}
 */
export class UptadeDonationEndpointApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {UptadeDonationCommand} [uptadeDonationCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UptadeDonationEndpointApi
     */
    public apiDonationsIdPut(id: string, uptadeDonationCommand?: UptadeDonationCommand, options?: RawAxiosRequestConfig) {
        return UptadeDonationEndpointApiFp(this.configuration).apiDonationsIdPut(id, uptadeDonationCommand, options).then((request) => request(this.axios, this.basePath));
    }
}

