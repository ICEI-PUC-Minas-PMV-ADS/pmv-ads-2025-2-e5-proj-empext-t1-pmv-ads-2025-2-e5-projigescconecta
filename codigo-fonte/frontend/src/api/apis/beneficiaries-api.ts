/* tslint:disable */
/* eslint-disable */
/**
 * IGESC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBeneficiaresGetBeneficiaryGetBeneficiaryEndpointGetBeneficiaryResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryViewModel } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryResponse } from '../models';
/**
 * BeneficiariesApi - axios parameter creator
 * @export
 */
export const BeneficiariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBeneficiary: async (igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/beneficiary/CreateBeneficiary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBeneficiary: async (beneficiaryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('deleteBeneficiary', 'beneficiaryId', beneficiaryId)
            const localVarPath = `/api/beneficiary/{beneficiaryId}`
                .replace(`{${"beneficiaryId"}}`, encodeURIComponent(String(beneficiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBeneficiary: async (beneficiaryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('getBeneficiary', 'beneficiaryId', beneficiaryId)
            const localVarPath = `/api/beneficiaries/{beneficiaryId}`
                .replace(`{${"beneficiaryId"}}`, encodeURIComponent(String(beneficiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBeneficiary: async (igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/beneficiary/ListBeneficiary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBeneficiary: async (beneficiaryId: number, igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'beneficiaryId' is not null or undefined
            assertParamExists('updateBeneficiary', 'beneficiaryId', beneficiaryId)
            const localVarPath = `/api/beneficiaries/{beneficiaryId}`
                .replace(`{${"beneficiaryId"}}`, encodeURIComponent(String(beneficiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BeneficiariesApi - functional programming interface
 * @export
 */
export const BeneficiariesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BeneficiariesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBeneficiary(igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBeneficiary(igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.createBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBeneficiary(beneficiaryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.deleteBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesBeneficiaresGetBeneficiaryGetBeneficiaryEndpointGetBeneficiaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBeneficiary(beneficiaryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.getBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBeneficiary(igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBeneficiary(igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.listBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBeneficiary(beneficiaryId: number, igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBeneficiary(beneficiaryId, igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BeneficiariesApi.updateBeneficiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BeneficiariesApi - factory interface
 * @export
 */
export const BeneficiariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BeneficiariesApiFp(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBeneficiary(igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryResponse> {
            return localVarFp.createBeneficiary(igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBeneficiary(beneficiaryId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBeneficiary(beneficiaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBeneficiary(beneficiaryId: number, options?: any): AxiosPromise<IgescConectaAPIFeaturesBeneficiaresGetBeneficiaryGetBeneficiaryEndpointGetBeneficiaryResponse> {
            return localVarFp.getBeneficiary(beneficiaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBeneficiary(igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryViewModel> {
            return localVarFp.listBeneficiary(igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} beneficiaryId 
         * @param {IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBeneficiary(beneficiaryId: number, igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryResponse> {
            return localVarFp.updateBeneficiary(beneficiaryId, igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BeneficiariesApi - object-oriented interface
 * @export
 * @class BeneficiariesApi
 * @extends {BaseAPI}
 */
export class BeneficiariesApi extends BaseAPI {
    /**
     * 
     * @param {IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public createBeneficiary(igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).createBeneficiary(igescConectaAPIFeaturesBeneficiaresCreateBeneficiaryCreateBeneficiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} beneficiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public deleteBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).deleteBeneficiary(beneficiaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} beneficiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public getBeneficiary(beneficiaryId: number, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).getBeneficiary(beneficiaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public listBeneficiary(igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).listBeneficiary(igescConectaAPIFeaturesBeneficiaresListBeneficiariesListBeneficiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} beneficiaryId 
     * @param {IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest} [igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiariesApi
     */
    public updateBeneficiary(beneficiaryId: number, igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest?: IgescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest, options?: RawAxiosRequestConfig) {
        return BeneficiariesApiFp(this.configuration).updateBeneficiary(beneficiaryId, igescConectaAPIFeaturesBeneficiaresUpdateBeneficiaryUpdateBeneficiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

