/* tslint:disable */
/* eslint-disable */
/**
 * IGESC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesTeamsDeleteTeamDeleteTeamResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesTeamsEditTeamEditTeamRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesTeamsEditTeamEditTeamResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesTeamsGetTeamByIdGetTeamByIdResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesTeamsListTeamsListTeamRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesTeamsListTeamsListTeamViewModel } from '../models';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest} [igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam: async (igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest?: IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams/CreateTeam`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: async (teamId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteTeam', 'teamId', teamId)
            const localVarPath = `/api/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} teamId 
         * @param {IgescConectaAPIFeaturesTeamsEditTeamEditTeamRequest} [igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTeam: async (teamId: number, igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest?: IgescConectaAPIFeaturesTeamsEditTeamEditTeamRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('editTeam', 'teamId', teamId)
            const localVarPath = `/api/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamById: async (teamId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamById', 'teamId', teamId)
            const localVarPath = `/api/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesTeamsListTeamsListTeamRequest} [igescConectaAPIFeaturesTeamsListTeamsListTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeam: async (igescConectaAPIFeaturesTeamsListTeamsListTeamRequest?: IgescConectaAPIFeaturesTeamsListTeamsListTeamRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesTeamsListTeamsListTeamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest} [igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeam(igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest?: IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeam(igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.createTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeam(teamId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesTeamsDeleteTeamDeleteTeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeam(teamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.deleteTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} teamId 
         * @param {IgescConectaAPIFeaturesTeamsEditTeamEditTeamRequest} [igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editTeam(teamId: number, igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest?: IgescConectaAPIFeaturesTeamsEditTeamEditTeamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesTeamsEditTeamEditTeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editTeam(teamId, igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.editTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamById(teamId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesTeamsGetTeamByIdGetTeamByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamById(teamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.getTeamById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesTeamsListTeamsListTeamRequest} [igescConectaAPIFeaturesTeamsListTeamsListTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeam(igescConectaAPIFeaturesTeamsListTeamsListTeamRequest?: IgescConectaAPIFeaturesTeamsListTeamsListTeamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesTeamsListTeamsListTeamViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeam(igescConectaAPIFeaturesTeamsListTeamsListTeamRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeamsApi.listTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest} [igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam(igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest?: IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamResponse> {
            return localVarFp.createTeam(igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(teamId: number, options?: any): AxiosPromise<IgescConectaAPIFeaturesTeamsDeleteTeamDeleteTeamResponse> {
            return localVarFp.deleteTeam(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} teamId 
         * @param {IgescConectaAPIFeaturesTeamsEditTeamEditTeamRequest} [igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTeam(teamId: number, igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest?: IgescConectaAPIFeaturesTeamsEditTeamEditTeamRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesTeamsEditTeamEditTeamResponse> {
            return localVarFp.editTeam(teamId, igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamById(teamId: number, options?: any): AxiosPromise<IgescConectaAPIFeaturesTeamsGetTeamByIdGetTeamByIdResponse> {
            return localVarFp.getTeamById(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesTeamsListTeamsListTeamRequest} [igescConectaAPIFeaturesTeamsListTeamsListTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeam(igescConectaAPIFeaturesTeamsListTeamsListTeamRequest?: IgescConectaAPIFeaturesTeamsListTeamsListTeamRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesTeamsListTeamsListTeamViewModel> {
            return localVarFp.listTeam(igescConectaAPIFeaturesTeamsListTeamsListTeamRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * 
     * @param {IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest} [igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createTeam(igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest?: IgescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createTeam(igescConectaAPIFeaturesTeamsCreateTeamCreateTeamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteTeam(teamId: number, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).deleteTeam(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} teamId 
     * @param {IgescConectaAPIFeaturesTeamsEditTeamEditTeamRequest} [igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public editTeam(teamId: number, igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest?: IgescConectaAPIFeaturesTeamsEditTeamEditTeamRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).editTeam(teamId, igescConectaAPIFeaturesTeamsEditTeamEditTeamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamById(teamId: number, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamById(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IgescConectaAPIFeaturesTeamsListTeamsListTeamRequest} [igescConectaAPIFeaturesTeamsListTeamsListTeamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listTeam(igescConectaAPIFeaturesTeamsListTeamsListTeamRequest?: IgescConectaAPIFeaturesTeamsListTeamsListTeamRequest, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listTeam(igescConectaAPIFeaturesTeamsListTeamsListTeamRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

