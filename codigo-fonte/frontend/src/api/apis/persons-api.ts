/* tslint:disable */
/* eslint-disable */
/**
 * IGESC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IgescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesPersonsCreatePersonPersonResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesPersonsGetPersonPersonViewModel } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesPersonsListPersonListPersonRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesPersonsListPersonListPersonViewModel } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesPersonsUpdatePersonPersonResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest } from '../models';
/**
 * PersonsApi - axios parameter creator
 * @export
 */
export const PersonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest} [igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson: async (igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest?: IgescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson: async (personId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('deletePerson', 'personId', personId)
            const localVarPath = `/api/persons/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson: async (personId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getPerson', 'personId', personId)
            const localVarPath = `/api/persons/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesPersonsListPersonListPersonRequest} [igescConectaAPIFeaturesPersonsListPersonListPersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPerson: async (igescConectaAPIFeaturesPersonsListPersonListPersonRequest?: IgescConectaAPIFeaturesPersonsListPersonListPersonRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/persons/ListPerson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesPersonsListPersonListPersonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} personId 
         * @param {IgescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest} [igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson: async (personId: number, igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest?: IgescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('updatePerson', 'personId', personId)
            const localVarPath = `/api/persons/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonsApi - functional programming interface
 * @export
 */
export const PersonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest} [igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPerson(igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest?: IgescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesPersonsCreatePersonPersonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPerson(igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.createPerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePerson(personId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePerson(personId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.deletePerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPerson(personId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesPersonsGetPersonPersonViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPerson(personId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.getPerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesPersonsListPersonListPersonRequest} [igescConectaAPIFeaturesPersonsListPersonListPersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPerson(igescConectaAPIFeaturesPersonsListPersonListPersonRequest?: IgescConectaAPIFeaturesPersonsListPersonListPersonRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesPersonsListPersonListPersonViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPerson(igescConectaAPIFeaturesPersonsListPersonListPersonRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.listPerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} personId 
         * @param {IgescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest} [igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePerson(personId: number, igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest?: IgescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesPersonsUpdatePersonPersonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePerson(personId, igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.updatePerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PersonsApi - factory interface
 * @export
 */
export const PersonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonsApiFp(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest} [igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson(igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest?: IgescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesPersonsCreatePersonPersonResponse> {
            return localVarFp.createPerson(igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson(personId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePerson(personId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson(personId: number, options?: any): AxiosPromise<IgescConectaAPIFeaturesPersonsGetPersonPersonViewModel> {
            return localVarFp.getPerson(personId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesPersonsListPersonListPersonRequest} [igescConectaAPIFeaturesPersonsListPersonListPersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPerson(igescConectaAPIFeaturesPersonsListPersonListPersonRequest?: IgescConectaAPIFeaturesPersonsListPersonListPersonRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesPersonsListPersonListPersonViewModel> {
            return localVarFp.listPerson(igescConectaAPIFeaturesPersonsListPersonListPersonRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} personId 
         * @param {IgescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest} [igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson(personId: number, igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest?: IgescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesPersonsUpdatePersonPersonResponse> {
            return localVarFp.updatePerson(personId, igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonsApi - object-oriented interface
 * @export
 * @class PersonsApi
 * @extends {BaseAPI}
 */
export class PersonsApi extends BaseAPI {
    /**
     * 
     * @param {IgescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest} [igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public createPerson(igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest?: IgescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).createPerson(igescConectaAPIFeaturesPersonsCreatePersonCreatePersonRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public deletePerson(personId: number, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).deletePerson(personId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public getPerson(personId: number, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).getPerson(personId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IgescConectaAPIFeaturesPersonsListPersonListPersonRequest} [igescConectaAPIFeaturesPersonsListPersonListPersonRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public listPerson(igescConectaAPIFeaturesPersonsListPersonListPersonRequest?: IgescConectaAPIFeaturesPersonsListPersonListPersonRequest, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).listPerson(igescConectaAPIFeaturesPersonsListPersonListPersonRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} personId 
     * @param {IgescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest} [igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public updatePerson(personId: number, igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest?: IgescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).updatePerson(personId, igescConectaAPIFeaturesPersonsUpdatePersonUpdatePersonRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

