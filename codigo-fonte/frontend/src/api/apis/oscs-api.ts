/* tslint:disable */
/* eslint-disable */
/**
 * IGESC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IgescConectaAPIFeaturesOscsCreateOscCreateOscRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesOscsCreateOscCreateOscResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesOscsGetOscGetOscResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesOscsListOscsListOscRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesOscsListOscsListOscViewModel } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesOscsUpdateOscUpdateOscResponse } from '../models';
/**
 * OscsApi - axios parameter creator
 * @export
 */
export const OscsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesOscsCreateOscCreateOscRequest} [igescConectaAPIFeaturesOscsCreateOscCreateOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOsc: async (igescConectaAPIFeaturesOscsCreateOscCreateOscRequest?: IgescConectaAPIFeaturesOscsCreateOscCreateOscRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/osc/CreateOsc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesOscsCreateOscCreateOscRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOsc: async (oscId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oscId' is not null or undefined
            assertParamExists('deleteOsc', 'oscId', oscId)
            const localVarPath = `/api/osc/{oscId}`
                .replace(`{${"oscId"}}`, encodeURIComponent(String(oscId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOsc: async (oscId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oscId' is not null or undefined
            assertParamExists('getOsc', 'oscId', oscId)
            const localVarPath = `/api/oscs/{oscId}`
                .replace(`{${"oscId"}}`, encodeURIComponent(String(oscId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesOscsListOscsListOscRequest} [igescConectaAPIFeaturesOscsListOscsListOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOsc: async (igescConectaAPIFeaturesOscsListOscsListOscRequest?: IgescConectaAPIFeaturesOscsListOscsListOscRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/osc/ListOsc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesOscsListOscsListOscRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} oscId 
         * @param {IgescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest} [igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOsc: async (oscId: number, igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest?: IgescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oscId' is not null or undefined
            assertParamExists('updateOsc', 'oscId', oscId)
            const localVarPath = `/api/oscs/{oscId}`
                .replace(`{${"oscId"}}`, encodeURIComponent(String(oscId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OscsApi - functional programming interface
 * @export
 */
export const OscsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OscsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesOscsCreateOscCreateOscRequest} [igescConectaAPIFeaturesOscsCreateOscCreateOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOsc(igescConectaAPIFeaturesOscsCreateOscCreateOscRequest?: IgescConectaAPIFeaturesOscsCreateOscCreateOscRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesOscsCreateOscCreateOscResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOsc(igescConectaAPIFeaturesOscsCreateOscCreateOscRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.createOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOsc(oscId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOsc(oscId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.deleteOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOsc(oscId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesOscsGetOscGetOscResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOsc(oscId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.getOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesOscsListOscsListOscRequest} [igescConectaAPIFeaturesOscsListOscsListOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOsc(igescConectaAPIFeaturesOscsListOscsListOscRequest?: IgescConectaAPIFeaturesOscsListOscsListOscRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesOscsListOscsListOscViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOsc(igescConectaAPIFeaturesOscsListOscsListOscRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.listOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} oscId 
         * @param {IgescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest} [igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOsc(oscId: number, igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest?: IgescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesOscsUpdateOscUpdateOscResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOsc(oscId, igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OscsApi.updateOsc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OscsApi - factory interface
 * @export
 */
export const OscsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OscsApiFp(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesOscsCreateOscCreateOscRequest} [igescConectaAPIFeaturesOscsCreateOscCreateOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOsc(igescConectaAPIFeaturesOscsCreateOscCreateOscRequest?: IgescConectaAPIFeaturesOscsCreateOscCreateOscRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesOscsCreateOscCreateOscResponse> {
            return localVarFp.createOsc(igescConectaAPIFeaturesOscsCreateOscCreateOscRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOsc(oscId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOsc(oscId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} oscId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOsc(oscId: number, options?: any): AxiosPromise<IgescConectaAPIFeaturesOscsGetOscGetOscResponse> {
            return localVarFp.getOsc(oscId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesOscsListOscsListOscRequest} [igescConectaAPIFeaturesOscsListOscsListOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOsc(igescConectaAPIFeaturesOscsListOscsListOscRequest?: IgescConectaAPIFeaturesOscsListOscsListOscRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesOscsListOscsListOscViewModel> {
            return localVarFp.listOsc(igescConectaAPIFeaturesOscsListOscsListOscRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} oscId 
         * @param {IgescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest} [igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOsc(oscId: number, igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest?: IgescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesOscsUpdateOscUpdateOscResponse> {
            return localVarFp.updateOsc(oscId, igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OscsApi - object-oriented interface
 * @export
 * @class OscsApi
 * @extends {BaseAPI}
 */
export class OscsApi extends BaseAPI {
    /**
     * 
     * @param {IgescConectaAPIFeaturesOscsCreateOscCreateOscRequest} [igescConectaAPIFeaturesOscsCreateOscCreateOscRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public createOsc(igescConectaAPIFeaturesOscsCreateOscCreateOscRequest?: IgescConectaAPIFeaturesOscsCreateOscCreateOscRequest, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).createOsc(igescConectaAPIFeaturesOscsCreateOscCreateOscRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} oscId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public deleteOsc(oscId: number, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).deleteOsc(oscId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} oscId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public getOsc(oscId: number, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).getOsc(oscId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IgescConectaAPIFeaturesOscsListOscsListOscRequest} [igescConectaAPIFeaturesOscsListOscsListOscRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public listOsc(igescConectaAPIFeaturesOscsListOscsListOscRequest?: IgescConectaAPIFeaturesOscsListOscsListOscRequest, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).listOsc(igescConectaAPIFeaturesOscsListOscsListOscRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} oscId 
     * @param {IgescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest} [igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OscsApi
     */
    public updateOsc(oscId: number, igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest?: IgescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest, options?: RawAxiosRequestConfig) {
        return OscsApiFp(this.configuration).updateOsc(oscId, igescConectaAPIFeaturesOscsUpdateOscUpdateOscRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

