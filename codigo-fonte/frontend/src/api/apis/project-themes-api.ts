/* tslint:disable */
/* eslint-disable */
/**
 * IgescConecta.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateProjectThemeRequest } from '../models';
// @ts-ignore
import type { CreateProjectThemeResponse } from '../models';
// @ts-ignore
import type { DeleteProjectThemeResponse } from '../models';
// @ts-ignore
import type { EditProjectThemeRequest } from '../models';
// @ts-ignore
import type { EditProjectThemeResponse } from '../models';
// @ts-ignore
import type { GetProjectThemeByIdViewModel } from '../models';
// @ts-ignore
import type { ListProjectThemeRequest } from '../models';
// @ts-ignore
import type { ListProjectThemeViewModel } from '../models';
// @ts-ignore
import type { RestoreProjectThemeResponse } from '../models';
/**
 * ProjectThemesApi - axios parameter creator
 * @export
 */
export const ProjectThemesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProjectThemeRequest} [createProjectThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectTheme: async (createProjectThemeRequest?: CreateProjectThemeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projectthemes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectThemeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectThemeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectTheme: async (projectThemeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectThemeId' is not null or undefined
            assertParamExists('deleteProjectTheme', 'projectThemeId', projectThemeId)
            const localVarPath = `/api/projectthemes/{projectThemeId}`
                .replace(`{${"projectThemeId"}}`, encodeURIComponent(String(projectThemeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectThemeId 
         * @param {EditProjectThemeRequest} [editProjectThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProjectTheme: async (projectThemeId: number, editProjectThemeRequest?: EditProjectThemeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectThemeId' is not null or undefined
            assertParamExists('editProjectTheme', 'projectThemeId', projectThemeId)
            const localVarPath = `/api/projectthemes/{projectThemeId}`
                .replace(`{${"projectThemeId"}}`, encodeURIComponent(String(projectThemeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editProjectThemeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectThemeById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectThemeById', 'id', id)
            const localVarPath = `/api/projectthemes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListProjectThemeRequest} [listProjectThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectTheme: async (listProjectThemeRequest?: ListProjectThemeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projectthemes/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listProjectThemeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} projectThemeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreProjectTheme: async (projectThemeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectThemeId' is not null or undefined
            assertParamExists('restoreProjectTheme', 'projectThemeId', projectThemeId)
            const localVarPath = `/api/projectthemes/{projectThemeId}/restore`
                .replace(`{${"projectThemeId"}}`, encodeURIComponent(String(projectThemeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectThemesApi - functional programming interface
 * @export
 */
export const ProjectThemesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectThemesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProjectThemeRequest} [createProjectThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectTheme(createProjectThemeRequest?: CreateProjectThemeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProjectThemeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectTheme(createProjectThemeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectThemesApi.createProjectTheme']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectThemeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectTheme(projectThemeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProjectThemeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectTheme(projectThemeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectThemesApi.deleteProjectTheme']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectThemeId 
         * @param {EditProjectThemeRequest} [editProjectThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editProjectTheme(projectThemeId: number, editProjectThemeRequest?: EditProjectThemeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditProjectThemeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editProjectTheme(projectThemeId, editProjectThemeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectThemesApi.editProjectTheme']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectThemeById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectThemeByIdViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectThemeById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectThemesApi.getProjectThemeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListProjectThemeRequest} [listProjectThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjectTheme(listProjectThemeRequest?: ListProjectThemeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProjectThemeViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjectTheme(listProjectThemeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectThemesApi.listProjectTheme']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} projectThemeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restoreProjectTheme(projectThemeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestoreProjectThemeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restoreProjectTheme(projectThemeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectThemesApi.restoreProjectTheme']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectThemesApi - factory interface
 * @export
 */
export const ProjectThemesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectThemesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProjectThemeRequest} [createProjectThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectTheme(createProjectThemeRequest?: CreateProjectThemeRequest, options?: any): AxiosPromise<CreateProjectThemeResponse> {
            return localVarFp.createProjectTheme(createProjectThemeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectThemeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectTheme(projectThemeId: number, options?: any): AxiosPromise<DeleteProjectThemeResponse> {
            return localVarFp.deleteProjectTheme(projectThemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectThemeId 
         * @param {EditProjectThemeRequest} [editProjectThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProjectTheme(projectThemeId: number, editProjectThemeRequest?: EditProjectThemeRequest, options?: any): AxiosPromise<EditProjectThemeResponse> {
            return localVarFp.editProjectTheme(projectThemeId, editProjectThemeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectThemeById(id: number, options?: any): AxiosPromise<GetProjectThemeByIdViewModel> {
            return localVarFp.getProjectThemeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListProjectThemeRequest} [listProjectThemeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectTheme(listProjectThemeRequest?: ListProjectThemeRequest, options?: any): AxiosPromise<ListProjectThemeViewModel> {
            return localVarFp.listProjectTheme(listProjectThemeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} projectThemeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreProjectTheme(projectThemeId: number, options?: any): AxiosPromise<RestoreProjectThemeResponse> {
            return localVarFp.restoreProjectTheme(projectThemeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectThemesApi - object-oriented interface
 * @export
 * @class ProjectThemesApi
 * @extends {BaseAPI}
 */
export class ProjectThemesApi extends BaseAPI {
    /**
     * 
     * @param {CreateProjectThemeRequest} [createProjectThemeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectThemesApi
     */
    public createProjectTheme(createProjectThemeRequest?: CreateProjectThemeRequest, options?: RawAxiosRequestConfig) {
        return ProjectThemesApiFp(this.configuration).createProjectTheme(createProjectThemeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectThemeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectThemesApi
     */
    public deleteProjectTheme(projectThemeId: number, options?: RawAxiosRequestConfig) {
        return ProjectThemesApiFp(this.configuration).deleteProjectTheme(projectThemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectThemeId 
     * @param {EditProjectThemeRequest} [editProjectThemeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectThemesApi
     */
    public editProjectTheme(projectThemeId: number, editProjectThemeRequest?: EditProjectThemeRequest, options?: RawAxiosRequestConfig) {
        return ProjectThemesApiFp(this.configuration).editProjectTheme(projectThemeId, editProjectThemeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectThemesApi
     */
    public getProjectThemeById(id: number, options?: RawAxiosRequestConfig) {
        return ProjectThemesApiFp(this.configuration).getProjectThemeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListProjectThemeRequest} [listProjectThemeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectThemesApi
     */
    public listProjectTheme(listProjectThemeRequest?: ListProjectThemeRequest, options?: RawAxiosRequestConfig) {
        return ProjectThemesApiFp(this.configuration).listProjectTheme(listProjectThemeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} projectThemeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectThemesApi
     */
    public restoreProjectTheme(projectThemeId: number, options?: RawAxiosRequestConfig) {
        return ProjectThemesApiFp(this.configuration).restoreProjectTheme(projectThemeId, options).then((request) => request(this.axios, this.basePath));
    }
}

