/* tslint:disable */
/* eslint-disable */
/**
 * IGESC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesAuthLoginResponse } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest } from '../models';
// @ts-ignore
import type { IgescConectaAPIFeaturesAuthResetPasswordResetPasswordResponse } from '../models';
// @ts-ignore
import type { IgescConectaDomainEntitiesUserLogin } from '../models';
// @ts-ignore
import type { IgescConectaDomainEntitiesUserToken } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest} [igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest?: IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IgescConectaDomainEntitiesUserLogin} [igescConectaDomainEntitiesUserLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (igescConectaDomainEntitiesUserLogin?: IgescConectaDomainEntitiesUserLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaDomainEntitiesUserLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesAuthLoginResponse} [igescConectaAPIFeaturesAuthLoginResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (igescConectaAPIFeaturesAuthLoginResponse?: IgescConectaAPIFeaturesAuthLoginResponse, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/RefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesAuthLoginResponse, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest} [igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest?: IgescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest} [igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest?: IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.forgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {IgescConectaDomainEntitiesUserLogin} [igescConectaDomainEntitiesUserLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(igescConectaDomainEntitiesUserLogin?: IgescConectaDomainEntitiesUserLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaDomainEntitiesUserToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(igescConectaDomainEntitiesUserLogin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesAuthLoginResponse} [igescConectaAPIFeaturesAuthLoginResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(igescConectaAPIFeaturesAuthLoginResponse?: IgescConectaAPIFeaturesAuthLoginResponse, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(igescConectaAPIFeaturesAuthLoginResponse, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest} [igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest?: IgescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IgescConectaAPIFeaturesAuthResetPasswordResetPasswordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest} [igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest?: IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordResponse> {
            return localVarFp.forgotPassword(igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IgescConectaDomainEntitiesUserLogin} [igescConectaDomainEntitiesUserLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(igescConectaDomainEntitiesUserLogin?: IgescConectaDomainEntitiesUserLogin, options?: any): AxiosPromise<IgescConectaDomainEntitiesUserToken> {
            return localVarFp.login(igescConectaDomainEntitiesUserLogin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesAuthLoginResponse} [igescConectaAPIFeaturesAuthLoginResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(igescConectaAPIFeaturesAuthLoginResponse?: IgescConectaAPIFeaturesAuthLoginResponse, options?: any): AxiosPromise<void> {
            return localVarFp.refreshToken(igescConectaAPIFeaturesAuthLoginResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IgescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest} [igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest?: IgescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest, options?: any): AxiosPromise<IgescConectaAPIFeaturesAuthResetPasswordResetPasswordResponse> {
            return localVarFp.resetPassword(igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest} [igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public forgotPassword(igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest?: IgescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).forgotPassword(igescConectaAPIFeaturesAuthForgotPasswordForgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IgescConectaDomainEntitiesUserLogin} [igescConectaDomainEntitiesUserLogin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(igescConectaDomainEntitiesUserLogin?: IgescConectaDomainEntitiesUserLogin, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(igescConectaDomainEntitiesUserLogin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IgescConectaAPIFeaturesAuthLoginResponse} [igescConectaAPIFeaturesAuthLoginResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(igescConectaAPIFeaturesAuthLoginResponse?: IgescConectaAPIFeaturesAuthLoginResponse, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(igescConectaAPIFeaturesAuthLoginResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IgescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest} [igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public resetPassword(igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest?: IgescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).resetPassword(igescConectaAPIFeaturesAuthResetPasswordResetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

